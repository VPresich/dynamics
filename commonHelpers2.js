var f=(r,e,t)=>{if(!e.has(r))throw TypeError("Cannot "+t)};var g=(r,e,t)=>(f(r,e,"read from private field"),t?t.call(r):e.get(r)),d=(r,e,t)=>{if(e.has(r))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(r):e.set(r,t)},p=(r,e,t,o)=>(f(r,e,"write to private field"),o?o.call(r,t):e.set(r,t),t);var c=(r,e,t)=>(f(r,e,"access private method"),t);/* empty css                      */(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))o(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const u of n.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&o(u)}).observe(document,{childList:!0,subtree:!0});function t(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerpolicy&&(n.referrerPolicy=s.referrerpolicy),s.crossorigin==="use-credentials"?n.credentials="include":s.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(s){if(s.ep)return;s.ep=!0;const n=t(s);fetch(s.href,n)}})();const m="https://energyflow.b.goit.study/api/";var a,i,l;class y{constructor(e){d(this,i);d(this,a,"");p(this,a,e)}objectGetRequest(e){return c(this,i,l).call(this,e)}objectCreateRequest(e,t){return c(this,i,l).call(this,e,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}})}objectDeleteRequest(e,t){return c(this,i,l).call(this,`${e}/${t}`,{method:"DELETE"})}ojectUpdateRequest(e,t){return c(this,i,l).call(this,`${e}/${t.id}`,{method:"PUT",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}})}}a=new WeakMap,i=new WeakSet,l=function(e,t={}){return fetch(g(this,a)+e,t).then(o=>{if(!o.ok)throw new Error(o.status);return o.json()}).catch(o=>console.log(o.message))};const b=new y(m);async function L(r){const e={filter:r,page:1,per_page:12},t=`filters?${new URLSearchParams(e).toString()}`;console.log();try{return await b.objectGetRequest(t)}catch{}}function R(r=[]){return r.reduce((e,{imgUrl:t,name:o,filter:s})=>e+`
      <li class="filter-card">
            <img
          src="${t}"
          alt="Image of: ${s}"         
        />
            <div class="filter-label">
            <p class="filter-name">${o}</p>
            <p class="filter-type">${s}</p>            
            </div>
          </li>
      `,"")}const q=(r,e)=>{const t=R(e);r.innerHTML="",r.insertAdjacentHTML("beforeend",t)},T="Muscles",E=document.querySelector(".filters-buttons"),P=document.querySelector(".exercise-filters-list");E.addEventListener("click",S);function S(r){if(r.target.tagName!=="BUTTON")return;const e=r.target.dataset.filter;h(e)}function h(r=T){L(r).then(e=>{const t=e.results;t.length||console.log("Sorry, there are no data matching your search query. Please, try again!"),e.totalPages,e.perPage,q(P,t)}).catch(e=>{reject(`Error fetching images: ${e.message}`)})}h();
//# sourceMappingURL=commonHelpers2.js.map
